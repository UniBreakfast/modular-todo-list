#! project://todo.txt

Requirements:
  - Frontend ToDo List app, vanilla JS, no frameworks
  - Form with an input field and a submit button
  - List of items
  - Sumbitting the form should add a new item to the list
  - Items can be deleted by clicking on "delete" button next to them
  - Items can be (un)checked with a checkbox on the left side of the item or by clicking on the item text
  - Form, list, record storage, check mod and remove mod should be implemented as modules with expected API

Form module API:
  - Included with link[rel="import"][name="form"][href="some/path/form.htm"], link[rel="stylesheet"][href="some/path/form.css"], script[src="some/path/form.js"][defer]
  - Should provide an abstract form object with an init method that should be called to initialize the form
  - init method should accept a recordStorage object and store it for later use
  - recordStorage.add method should be called when form is submitted successfully and an object with a text property should be passed to it

Form Requirements:
  - Should have a text input field
  - Should have a submit button "Add"
  - Should handle form submit event
  - Should require input field to have non-empty value without leading/trailing spaces
  - Should clear the input field after successful submit

Record Storage module API:
  - Included with script[src="some/path/record-storage.js"][defer]
  - Should provide an abstract recordStorage object with an init method that should be called to initialize the recordStorage
  - init method should accept a list object and store it for later use
  - add method should accept an object with a text property and store a record with this text
  - list.add method should be called when a record is added to the storage and an object with a text property should be passed to it
  - remove method should accept an index of a record to remove it from the storage
  - list.remove method should be called when a record is removed from the storage and an index of the removed record should be passed to it
  - update method should accept an index of a record and a boolean value to update it`s status
  - list.update method should be called when a record is updated and an index of the updated record and current object state should be passed to it

List module API:
  - Included with link[rel="import"][name="list"][href="some/path/list.htm"], link[rel="stylesheet"][href="some/path/list.css"], script[src="some/path/list.js"][defer]
  - Should provide an abstract list object with an init method that should be called to initialize the list
  - init method should accept optional modifier objects and store them for later use
  - add method should accept an object with a text property and add a list item with this text to the list
  - If a modifier object with a modify method was passed to the init method, it should be called with a list item before it`s added to the list
  - remove method should accept an index of the item to be removed and remove it from the list
  - update method should accept an index of the item to be updated and a record object with a text and checked properties and replace the list item by that index with a new one recreated from the record object

List Requirements:
  - Should show a list of items with a text

Remove Mod module API:
  - Included with link[rel="stylesheet"][href="some/path/remove-mod.css"], script[src="some/path/remove-mod.js"][defer]
  - Should provide an abstract removeMod object with an init method that should be called to initialize the removeMod
  - init method should accept a recordStorage object and store it for later use
  - modify method should accept a list item and add a "delete" button before it`s end
  - recordStorage.remove method should be called when "delete" button is clicked and an index of the item to be removed should be passed to it

Check Mod module API:
  - Included with link[rel="stylesheet"][href="some/path/check-mod.css"], script[src="some/path/check-mod.js"][defer]
  - Should provide an abstract checkMod object with an init method that should be called to initialize the checkMod
  - init method should accept a recordStorage object and store it for later use
  - modify method should accept a list item and wrap it`s text in a label with a checkbox before it
  - recordStorage.update method should be called when checkbox is checked/unchecked and an index of the item to be updated and a boolean value should be passed to it

Utilitary Requirements:
  - Modules should have standalone html files for isolated testing
  - Standalone html files should test module API
